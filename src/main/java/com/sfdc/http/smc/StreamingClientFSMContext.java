/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : StreamingClientFSM.sm
 */


//
// Author: Prashant Srinivasan
//


package com.sfdc.http.smc;

import com.ning.http.client.Cookie;
import com.ning.http.client.Response;

import java.util.List;
import java.util.concurrent.Future;

public class StreamingClientFSMContext
        extends statemap.FSMContext {
//---------------------------------------------------------------
// Member methods.
//

    public StreamingClientFSMContext(StreamingClient owner) {
        super(FSM.Initial);

        _owner = owner;
    }

    public StreamingClientFSMContext(StreamingClient owner, StreamingClientState initState) {
        super(initState);

        _owner = owner;
    }

    public synchronized void enterStartState() {
        getState().Entry(this);
        return;
    }

    public synchronized void on500Error(Response response) {
        _transition = "on500Error";
        getState().on500Error(this, response);
        _transition = "";
        return;
    }

    public synchronized void onConnectComplete() {
        _transition = "onConnectComplete";
        getState().onConnectComplete(this);
        _transition = "";
        return;
    }

    public synchronized void onFinishedScenario() {
        _transition = "onFinishedScenario";
        getState().onFinishedScenario(this);
        _transition = "";
        return;
    }

    public synchronized void onHandshakeComplete(List<Cookie> cookies, String clientId) {
        _transition = "onHandshakeComplete";
        getState().onHandshakeComplete(this, cookies, clientId);
        _transition = "";
        return;
    }

    public synchronized void onInvalidAuthCredentials(Response response) {
        _transition = "onInvalidAuthCredentials";
        getState().onInvalidAuthCredentials(this, response);
        _transition = "";
        return;
    }

    public synchronized void onReconnectRequest() {
        _transition = "onReconnectRequest";
        getState().onReconnectRequest(this);
        _transition = "";
        return;
    }

    public synchronized void onStartingConnect(Future<Response> future) {
        _transition = "onStartingConnect";
        getState().onStartingConnect(this, future);
        _transition = "";
        return;
    }

    public synchronized void onStartingHandshake(Future<Response> future) {
        _transition = "onStartingHandshake";
        getState().onStartingHandshake(this, future);
        _transition = "";
        return;
    }

    public synchronized void onStartingSubscribe(Future<Response> future) {
        _transition = "onStartingSubscribe";
        getState().onStartingSubscribe(this, future);
        _transition = "";
        return;
    }

    public synchronized void onSubscribeComplete() {
        _transition = "onSubscribeComplete";
        getState().onSubscribeComplete(this);
        _transition = "";
        return;
    }

    public StreamingClientState getState()
            throws statemap.StateUndefinedException {
        if (_state == null) {
            throw (
                    new statemap.StateUndefinedException());
        }

        return ((StreamingClientState) _state);
    }

    protected StreamingClient getOwner() {
        return (_owner);
    }

    public void setOwner(StreamingClient owner) {
        if (owner == null) {
            throw (
                    new NullPointerException(
                            "null owner"));
        } else {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private StreamingClient _owner;

    public static abstract class StreamingClientState
            extends statemap.State {
        //-----------------------------------------------------------
        // Member methods.
        //

        protected StreamingClientState(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
        }

        protected void Exit(StreamingClientFSMContext context) {
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            Default(context);
        }

        protected void onConnectComplete(StreamingClientFSMContext context) {
            Default(context);
        }

        protected void onFinishedScenario(StreamingClientFSMContext context) {
            Default(context);
        }

        protected void onHandshakeComplete(StreamingClientFSMContext context, List<Cookie> cookies, String clientId) {
            Default(context);
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            Default(context);
        }

        protected void onReconnectRequest(StreamingClientFSMContext context) {
            Default(context);
        }

        protected void onStartingConnect(StreamingClientFSMContext context, Future<Response> future) {
            Default(context);
        }

        protected void onStartingHandshake(StreamingClientFSMContext context, Future<Response> future) {
            Default(context);
        }

        protected void onStartingSubscribe(StreamingClientFSMContext context, Future<Response> future) {
            Default(context);
        }

        protected void onSubscribeComplete(StreamingClientFSMContext context) {
            Default(context);
        }

        protected void Default(StreamingClientFSMContext context) {
            throw (
                    new statemap.TransitionUndefinedException(
                            "State: " +
                                    context.getState().getName() +
                                    ", Transition: " +
                                    context.getTransition()));
        }

        //-----------------------------------------------------------
        // Member data.
        //
    }

    /* package */ static abstract class FSM {
        //-----------------------------------------------------------
        // Member methods.
        //

        //-----------------------------------------------------------
        // Member data.
        //

        //-------------------------------------------------------
        // Constants.
        //
        public static final FSM_Initial Initial =
                new FSM_Initial("FSM.Initial", 0);
        public static final FSM_Handshaking Handshaking =
                new FSM_Handshaking("FSM.Handshaking", 1);
        public static final FSM_Handshaken Handshaken =
                new FSM_Handshaken("FSM.Handshaken", 2);
        public static final FSM_Subscribing Subscribing =
                new FSM_Subscribing("FSM.Subscribing", 3);
        public static final FSM_Subscribed Subscribed =
                new FSM_Subscribed("FSM.Subscribed", 4);
        public static final FSM_Connected Connected =
                new FSM_Connected("FSM.Connected", 5);
        public static final FSM_Disconnected Disconnected =
                new FSM_Disconnected("FSM.Disconnected", 6);
        public static final FSM_Reconnecting Reconnecting =
                new FSM_Reconnecting("FSM.Reconnecting", 7);
        public static final FSM_Done Done =
                new FSM_Done("FSM.Done", 8);
        public static final FSM_ClientAborted ClientAborted =
                new FSM_ClientAborted("FSM.ClientAborted", 9);
        private static final FSM_Default Default =
                new FSM_Default("FSM.Default", -1);

    }

    protected static class FSM_Default
            extends StreamingClientState {
        //-----------------------------------------------------------
        // Member methods.
        //

        protected FSM_Default(String name, int id) {
            super(name, id);
        }
        //-----------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Initial
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Initial(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.startHandshake();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onStartingHandshake(StreamingClientFSMContext context, Future<Response> future) {

            (context.getState()).Exit(context);
            context.setState(FSM.Handshaking);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Handshaking
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Handshaking(String name, int id) {
            super(name, id);
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onHandshakeComplete(StreamingClientFSMContext context, List<Cookie> cookies, String clientId) {

            (context.getState()).Exit(context);
            context.setState(FSM.Handshaken);
            (context.getState()).Entry(context);
            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Handshaken
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Handshaken(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.startSubscribe();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onStartingSubscribe(StreamingClientFSMContext context, Future<Response> future) {

            (context.getState()).Exit(context);
            context.setState(FSM.Subscribing);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Subscribing
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Subscribing(String name, int id) {
            super(name, id);
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onSubscribeComplete(StreamingClientFSMContext context) {

            (context.getState()).Exit(context);
            context.setState(FSM.Subscribed);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Subscribed
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Subscribed(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.startConnect();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onStartingConnect(StreamingClientFSMContext context, Future<Response> future) {

            (context.getState()).Exit(context);
            context.setState(FSM.Connected);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Connected
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Connected(String name, int id) {
            super(name, id);
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onConnectComplete(StreamingClientFSMContext context) {

            (context.getState()).Exit(context);
            context.setState(FSM.Disconnected);
            (context.getState()).Entry(context);
            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Disconnected
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Disconnected(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.shouldWeReconnect();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onFinishedScenario(StreamingClientFSMContext context) {

            (context.getState()).Exit(context);
            context.setState(FSM.Done);
            (context.getState()).Entry(context);
            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onReconnectRequest(StreamingClientFSMContext context) {

            (context.getState()).Exit(context);
            context.setState(FSM.Reconnecting);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Reconnecting
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Reconnecting(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.startConnect();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onStartingConnect(StreamingClientFSMContext context, Future<Response> future) {

            (context.getState()).Exit(context);
            context.setState(FSM.Connected);
            (context.getState()).Entry(context);
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_Done
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_Done(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.clientDone();
            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }

    private static final class FSM_ClientAborted
            extends FSM_Default {
        //-------------------------------------------------------
        // Member methods.
        //

        private FSM_ClientAborted(String name, int id) {
            super(name, id);
        }

        protected void Entry(StreamingClientFSMContext context) {
            StreamingClient ctxt = context.getOwner();

            ctxt.clientAborted();
            return;
        }

        protected void on500Error(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueTo500(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        protected void onInvalidAuthCredentials(StreamingClientFSMContext context, Response response) {
            StreamingClient ctxt = context.getOwner();

            (context.getState()).Exit(context);
            context.clearState();
            try {
                ctxt.abortClientDueToBadCredentials(response);
            } finally {
                context.setState(FSM.ClientAborted);
                (context.getState()).Entry(context);
            }

            return;
        }

        //-------------------------------------------------------
        // Member data.
        //
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
